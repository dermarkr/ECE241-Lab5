module main(CLOCK_50, SW, HEX0);

input CLOCK_50;
input [2:0] SW;
input [6:0] HEX0;

wire [23:0] clockOut4;
wire [3:0] out;

clock4 c0(.clock(CLOCK_50), .reset(SW[2]), .q(clockOut4));
counter c1(.clock(clockout4), .reset(SW[2]), .q(out[3:0]));

hexOut h0(.num(out[3:0]), .hex(HEX0[6:0]));

endmodule

module clock4(clock, reset, clock2);
input clock, reset;
reg [23:0] q;

output reg clock2;

always@(posedge clock or posedge reset)
begin
	if(reset == 1)
		q<=0;
	else if(q == 23'b101111101011110000100000)
	begin
		q<=0;
		clock2 <= clock2 + 1;
	end		
	else
		q <= q + 1;
end

endmodule


module counter(clock, reset, q);
input clock, reset;
output reg [3:0] q;

always@(posedge clock or posedge reset)
begin
	if(reset == 1)
		q<=0;
	else
		q <= q + 1;
end

endmodule



module hexOut(num, hex);
	input [3:0] num;
	output reg [6:0] hex;

	always@(*)
	begin
		case(num[3:0])
			4'b0000: {hex[6:0]} = 'b1000000; //0
			4'b0001: {hex[6:0]} = 'b1111001; //1
			4'b0010: {hex[6:0]} = 'b0100100; //2
			4'b0011: {hex[6:0]} = 'b0110000; //3
			4'b0100: {hex[6:0]} = 'b0011001; //4
			4'b0101: {hex[6:0]} = 'b0010010; //5
			4'b0110: {hex[6:0]} = 'b0000010; //6
			4'b0111: {hex[6:0]} = 'b1111000; //7
			4'b1000: {hex[6:0]} = 'b0000000; //8
			4'b1001: {hex[6:0]} = 'b0010000; //9
			4'b1010: {hex[6:0]} = 'b0001000; //A
			4'b1011: {hex[6:0]} = 'b0000011; //b
			4'b1100: {hex[6:0]} = 'b1000110; //C
			4'b1101: {hex[6:0]} = 'b0100001; //d
			4'b1110: {hex[6:0]} = 'b0000110; //E
			4'b1111: {hex[6:0]} = 'b0001110; //F
			default: {hex[6:0]} = 'b0000000; 
		endcase
	end
	
endmodule